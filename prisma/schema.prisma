// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  refresh_token_expires_in Int?
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model MuscleGroup {
  id     Int      @id @default(autoincrement())
  title  String
  Muscle Muscle[]
}

model Muscle {
  id           Int         @id @default(autoincrement())
  title        String
  groupId      Int
  group        MuscleGroup @relation(fields: [groupId], references: [id])
  ActionsAgony Actions[]
}

model Actions {
  id                     Int               @id @default(autoincrement())
  muscleAgonyId          Int
  MuscleAgony            Muscle            @relation(fields: [muscleAgonyId], references: [id])
  title                  String
  desc                   String
  alias                  String?
  currentApproachGroupId Int?
  CurrentApproachGroup   ApproachesGroups? @relation(fields: [currentApproachGroupId], references: [id])
}

model ApproachesGroups {
  id         Int          @id @default(autoincrement())
  createdAt  DateTime     @default(now())
  actionId   Int
  Approaches Approaches[]
  Actions    Actions[]
  count      Int          @default(0)
  sum        Int          @default(0)
  mean       Float        @default(0.0)
}

model Approaches {
  id            Int              @id @default(autoincrement())
  priority      Int              @default(0)
  groupId       Int
  Group         ApproachesGroups @relation(fields: [groupId], references: [id])
  weight        Int
  countsPlanned Int
  countsLifted  Int              @default(0)
}
