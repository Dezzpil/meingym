// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_PRISMA_URL") // for vercel
  directUrl = env("DATABASE_URL_NON_POOLING") // for vercel
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  ActionMass      ActionMass[]
  ActionStrength  ActionStrength[]
  ApproachesGroup ApproachesGroup[]
  Training        Training[]
  Rig             Rig[]
  UserInfo        UserInfo[]
  ActionLoss      ActionLoss[]
}

enum TrainingProgression {
  NONE
  SIMPLE
}

enum Sex {
  MALE
  FEMALE
}

model UserInfo {
  id     Int    @id @default(autoincrement())
  userId String

  User User @relation(fields: [userId], references: [id], onDelete: Cascade)

  sex                       Sex                 @default(MALE)
  height                    Int                 @default(175)
  purpose                   Purpose             @default(STRENGTH)
  trainingProgression       TrainingProgression @default(NONE)
  trainingProgressionParams Json                @default("{}")
}

model Account {
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  refresh_token_expires_in Int?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model MuscleGroup {
  id Int @id @default(autoincrement())

  title           String
  Muscle          Muscle[]
  MuscleGroupDesc MuscleGroupDesc[]
}

model MuscleGroupDesc {
  id        Int         @id @default(autoincrement())
  groupId   Int
  Group     MuscleGroup @relation(fields: [groupId], references: [id], onDelete: Cascade)
  text      String
  link      String
  createdAt DateTime    @default(now())
}

model Muscle {
  id Int @id @default(autoincrement())

  title String

  groupId Int
  Group   MuscleGroup @relation(fields: [groupId], references: [id])

  AgonyInActions      ActionsOnMusclesAgony[]
  SynergyInActions    ActionsOnMusclesSynergy[]
  StabilizerInActions ActionsOnMusclesStabilizer[]

  MuscleDesc MuscleDesc[]
}

model MuscleDesc {
  id        Int      @id @default(autoincrement())
  muscleId  Int
  Muscle    Muscle   @relation(fields: [muscleId], references: [id], onDelete: Cascade)
  text      String
  link      String
  createdAt DateTime @default(now())
}

model ActionsOnMusclesAgony {
  muscleId Int
  Muscle   Muscle @relation(fields: [muscleId], references: [id])

  actionId Int
  Action   Action @relation(fields: [actionId], references: [id], onDelete: Cascade)

  @@id([actionId, muscleId])
}

model ActionsOnMusclesSynergy {
  muscleId Int
  Muscle   Muscle @relation(fields: [muscleId], references: [id])

  actionId Int
  Action   Action @relation(fields: [actionId], references: [id], onDelete: Cascade)

  @@id([actionId, muscleId])
}

model ActionsOnMusclesStabilizer {
  muscleId Int
  Muscle   Muscle @relation(fields: [muscleId], references: [id])

  actionId Int
  Action   Action @relation(fields: [actionId], references: [id], onDelete: Cascade)

  @@id([actionId, muscleId])
}

model Action {
  id Int @id @default(autoincrement())

  title String
  desc  String
  alias String?

  MusclesAgony      ActionsOnMusclesAgony[]
  MusclesSynergy    ActionsOnMusclesSynergy[]
  MusclesStabilizer ActionsOnMusclesStabilizer[]

  TrainingExercise TrainingExercise[]

  rig ActionRig @default(OTHER)

  ActionMass      ActionMass[]
  ActionStrength  ActionStrength[]
  ApproachesGroup ApproachesGroup[]

  strengthAllowed Boolean @default(false)
  bigCount        Boolean @default(false)
  allowCheating   Boolean @default(false)

  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @default(now())
  ActionLoss ActionLoss[]

  anotherTitles String?
}

model ActionMass {
  id Int @id @default(autoincrement())

  currentApproachGroupId Int
  CurrentApproachGroup   ApproachesGroup @relation(fields: [currentApproachGroupId], references: [id], onDelete: Cascade)

  actionId Int
  Action   Action @relation(fields: [actionId], references: [id], onDelete: Cascade)

  userId String
  User   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ActionStrength {
  id Int @id @default(autoincrement())

  currentApproachGroupId Int
  CurrentApproachGroup   ApproachesGroup @relation(fields: [currentApproachGroupId], references: [id], onDelete: Cascade)

  actionId Int
  Action   Action @relation(fields: [actionId], references: [id], onDelete: Cascade)

  userId String
  User   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ActionLoss {
  id Int @id @default(autoincrement())

  currentApproachGroupId Int
  CurrentApproachGroup   ApproachesGroup @relation(fields: [currentApproachGroupId], references: [id], onDelete: Cascade)

  actionId Int
  Action   Action @relation(fields: [actionId], references: [id], onDelete: Cascade)

  userId String
  User   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ApproachesGroup {
  id Int @id @default(autoincrement())

  createdAt DateTime @default(now())

  // см. SetsStats
  count      Int   @default(0)
  sum        Int   @default(0)
  mean       Float @default(0.0)
  countTotal Int   @default(0)

  ActionMass     ActionMass[]
  ActionStrength ActionStrength[]

  Approaches       Approach[]
  TrainingExercise TrainingExercise[]

  actionId Int
  Action   Action @relation(fields: [actionId], references: [id], onDelete: Cascade)

  userId     String
  User       User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  ActionLoss ActionLoss[]
}

model Approach {
  id Int @id @default(autoincrement())

  priority Int   @default(0)
  weight   Float
  count    Int

  groupId                   Int
  Group                     ApproachesGroup             @relation(fields: [groupId], references: [id], onDelete: Cascade)
  TrainingExerciseExecution TrainingExerciseExecution[]
}

enum Purpose {
  MASS
  STRENGTH
  LOSS
}

model Training {
  id Int @id @default(autoincrement())

  createdAt        DateTime           @default(now())
  plannedTo        DateTime
  startedAt        DateTime?
  completedAt      DateTime?
  processedAt      DateTime?
  TrainingExercise TrainingExercise[]

  userId String
  User   User   @relation(references: [id], fields: [userId], onDelete: Cascade)

  isCircuit       Boolean @default(false)
  commonComment   String?
  completeComment String?
}

model TrainingExercise {
  id Int @id @default(autoincrement())

  trainingId Int
  Training   Training @relation(references: [id], fields: [trainingId], onDelete: Cascade)

  priority Int @default(0)

  approachGroupId Int
  ApproachGroup   ApproachesGroup @relation(references: [id], fields: [approachGroupId], onDelete: Cascade)

  startedAt                 DateTime?
  completedAt               DateTime?
  TrainingExerciseExecution TrainingExerciseExecution[]

  purpose   Purpose
  purposeId Int // ActionMass.id | ActionStrength.id | ActionLoss.id

  actionId Int
  Action   Action @relation(fields: [actionId], references: [id], onDelete: Cascade)

  isPassed Boolean @default(false)

  liftedSum        Int   @default(0)
  liftedMean       Float @default(0.0)
  liftedCountTotal Int   @default(0)

  rating  TrainingRating @default(OK)
  comment String?
}

enum TrainingRating {
  EASY
  OK
  HARD
  IMPOSSIBLE
}

model TrainingExerciseExecution {
  id Int @id @default(autoincrement())

  exerciseId Int
  Exercise   TrainingExercise @relation(references: [id], fields: [exerciseId], onDelete: Cascade)

  approachId Int?
  Approach   Approach? @relation(references: [id], fields: [approachId], onDelete: Cascade)

  plannedWeigth Float
  plannedCount  Int
  liftedWeight  Float
  liftedCount   Int

  executedAt DateTime?
  isPassed   Boolean   @default(false)
  priority   Int       @default(0)

  rating    ExecutionRating    @default(OK)
  technique ExecutionTechnique @default(OK)
  cheating  ExecutionCheating  @default(NO)
  refusing  ExecutionRefusing  @default(NO)
  burning   ExecutionBurning   @default(NO)

  comment String?

  techniqueUpgrade Boolean @default(false)
}

// см. RatingOptions
enum ExecutionRating {
  EASY
  OK
  TENSION_OK // deprecated
  TENSION_FLAW // deprecated
  TENSION
  HARD
}

enum ExecutionTechnique {
  OK
  FLAW
}

// см. CheatingOptions
enum ExecutionCheating {
  NO
  PART
  FULL
}

// см. RefusingOptions
enum ExecutionRefusing {
  NO
  SOON
  YES
}

// см. BurningOptions
enum ExecutionBurning {
  NO
  YES
}

enum ActionRig {
  BLOCKS
  BARBELL
  DUMBBELL
  OTHER
}

model Rig {
  code   String @id
  title  String
  value  Float
  userId String
  user   User   @relation(references: [id], fields: [userId], onDelete: Cascade)
}

model Weight {
  id        Int      @id @default(autoincrement())
  userId    String
  createdAt DateTime @default(now())
  value     Float
}
