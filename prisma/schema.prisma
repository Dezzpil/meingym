// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_PRISMA_URL") // for vercel
  directUrl = env("DATABASE_URL_NON_POOLING") // for vercel
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Weights   Weights[]
}

model Account {
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  refresh_token_expires_in Int?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model MuscleGroup {
  id Int @id @default(autoincrement())

  title  String
  Muscle Muscle[]
}

model Muscle {
  id Int @id @default(autoincrement())

  title String

  groupId Int
  Group   MuscleGroup @relation(fields: [groupId], references: [id])

  AgonyInActions             ActionsOnMusclesAgony[]
  SynergyInActions           ActionsOnMusclesSynergy[]
  ActionsOnMusclesStabilizer ActionsOnMusclesStabilizer[]
}

model ActionsOnMusclesAgony {
  muscleId Int
  Muscle   Muscle @relation(fields: [muscleId], references: [id])

  actionId Int
  Action   Action @relation(fields: [actionId], references: [id])

  @@id([actionId, muscleId])
}

model ActionsOnMusclesSynergy {
  muscleId Int
  Muscle   Muscle @relation(fields: [muscleId], references: [id])

  actionId Int
  Action   Action @relation(fields: [actionId], references: [id])

  @@id([actionId, muscleId])
}

model ActionsOnMusclesStabilizer {
  muscleId Int
  Muscle   Muscle @relation(fields: [muscleId], references: [id])

  actionId Int
  Action   Action @relation(fields: [actionId], references: [id])

  @@id([actionId, muscleId])
}

enum ActionRig {
  BLOCKS
  BARBELL
  OTHER
}

model Action {
  id Int @id @default(autoincrement())

  title String
  desc  String
  alias String?

  MusclesAgony      ActionsOnMusclesAgony[]
  MusclesSynergy    ActionsOnMusclesSynergy[]
  MusclesStabilizer ActionsOnMusclesStabilizer[]

  massId Int
  Mass   ActionMass @relation(fields: [massId], references: [id])

  strengthId       Int
  Strength         ActionStrength     @relation(fields: [strengthId], references: [id])
  TrainingExercise TrainingExercise[]

  rig ActionRig @default(OTHER)
}

model ActionMass {
  id Int @id @default(autoincrement())

  currentApproachGroupId Int
  CurrentApproachGroup   ApproachesGroup @relation(fields: [currentApproachGroupId], references: [id])
  Action                 Action[]
}

model ActionStrength {
  id Int @id @default(autoincrement())

  currentApproachGroupId Int
  CurrentApproachGroup   ApproachesGroup @relation(fields: [currentApproachGroupId], references: [id])
  Action                 Action[]
}

model ApproachesGroup {
  id Int @id @default(autoincrement())

  createdAt DateTime @default(now())
  count     Int      @default(0)
  sum       Int      @default(0)
  mean      Float    @default(0.0)

  ActionMass     ActionMass[]
  ActionStrength ActionStrength[]

  Approaches       Approach[]
  TrainingExercise TrainingExercise[]
}

model Approach {
  id Int @id @default(autoincrement())

  priority Int   @default(0)
  weight   Float
  count    Int

  groupId                   Int
  Group                     ApproachesGroup             @relation(fields: [groupId], references: [id])
  TrainingExerciseExecution TrainingExerciseExecution[]
}

model Training {
  id Int @id @default(autoincrement())

  createdAt        DateTime           @default(now())
  plannedTo        DateTime
  startedAt        DateTime?
  completedAt      DateTime?
  TrainingExercise TrainingExercise[]
}

enum Purpose {
  MASS
  STRENGTH
}

model TrainingExercise {
  id Int @id @default(autoincrement())

  trainingId Int
  Training   Training @relation(references: [id], fields: [trainingId])

  priority Int @default(0)

  approachGroupId Int
  ApproachGroup   ApproachesGroup @relation(references: [id], fields: [approachGroupId])

  startedAt                 DateTime?
  completedAt               DateTime?
  TrainingExerciseExecution TrainingExerciseExecution[]

  purpose Purpose

  actionId Int
  Action   Action @relation(fields: [actionId], references: [id])

  isPassed Boolean @default(false)
}

model TrainingExerciseExecution {
  id Int @id @default(autoincrement())

  exerciseId Int
  Exercise   TrainingExercise @relation(references: [id], fields: [exerciseId])

  approachId Int
  Approach   Approach @relation(references: [id], fields: [approachId])

  plannedWeigth Float
  plannedCount  Int
  liftedWeight  Float
  liftedCount   Int

  executedAt DateTime?
  isPassed   Boolean   @default(false)
  priority   Int       @default(0)
}

model Weights {
  code   String @id
  title  String
  value  Float
  userId String
  user   User   @relation(references: [id], fields: [userId])
}
